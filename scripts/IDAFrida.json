{"frida_cmd": "frida -U --attach-name=\"com.example.app\" -l gen.js --no-pause", "template": "\n//\u8fd9\u662f\u9ed8\u8ba4\u7684\u6a21\u677f \n(function () {\n    // @ts-ignore\n    function print_arg(addr) {\n        try {\n            var module = Process.findRangeByAddress(addr);\n            if (module != null) return \"\\n\"+hexdump(addr) + \"\\n\";\n            return ptr(addr) + \"\\n\";\n        } catch (e) {\n            return addr + \"\\n\";\n        }\n    }\n    // @ts-ignore\n    function hook_native_addr(funcPtr, paramsNum) {\n        var module = Process.findModuleByAddress(funcPtr);\n        try {\n            Interceptor.attach(funcPtr, {\n                onEnter: function (args) {\n                    this.logs = \"\";\n                    this.params = [];\n                    // @ts-ignore\n                    this.logs=this.logs.concat(\"So: \" + module.name + \"  Method: [funcname] offset: \" + ptr(funcPtr).sub(module.base) + \"\\n\");\n                    for (let i = 0; i < paramsNum; i++) {\n                        this.params.push(args[i]);\n                        this.logs=this.logs.concat(\"this.args\" + i + \" onEnter: \" + print_arg(args[i]));\n                    }\n                }, onLeave: function (retval) {\n                    for (let i = 0; i < paramsNum; i++) {\n                        this.logs=this.logs.concat(\"this.args\" + i + \" onLeave: \" + print_arg(this.params[i]));\n                    }\n                    this.logs=this.logs.concat(\"retval onLeave: \" + print_arg(retval) + \"\\n\");\n                    console.log(this.logs);\n                }\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    // @ts-ignore\n    hook_native_addr(Module.findBaseAddress(\"[filename]\").add([offset]), [nargs]);\n})();\n"}